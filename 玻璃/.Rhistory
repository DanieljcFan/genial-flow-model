index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[,index])
summary(lm1)
tmp <- dat_glass[!na1,]
colnames(tmp) <- ''
corr <- cor(tmp)
corrplot.mixed(corr, diag = 'n', tl.pos = 'lt')
lm0 <- lm(netin~1, data = dat_glass)
lm_a <-  step(lm0, direction = 'backward')
summary(lm_a)
lars1 <- lars(as.matrix(dat_glass[,-1]), dat_glass[,1], type = 'lasso')
library(ggplot2)
library(lubridate) # date management
library(zoo) #date management
library(corrplot)
library(lars)
#load company report
load("C:/Users/dell/Desktop/暖流/report.rda")
setwd("C:/Users/dell/Desktop/暖流/玻璃")
chain <- read.csv('玻璃数据1.csv')
names(chain)[1] <- 'time'
chain$time <- as.POSIXlt(chain$time, format = '%Y-%m-%d')
#ave函数对数据集中的指标按月或季度平均
#默认时间标签在第一列，格式为POSIXlt，包含年月信息
Ave <- function(dat, t=1, type='season', ac = F){
library(zoo)
df <- list()
if(type == 'season'){time <- as.yearqtr(dat[,t])}
if(type == 'month'){time <- format(dat[,t], format='%Y-%m')}
dat <- cbind(dat[,t],dat[,-t])
if(ac){
for(i in 2: ncol(dat)){
tmp <- aggregate(dat[,i],by=list(time),max, na.rm = T)
year <- as.numeric(format(tmp[,1], format='%Y'))
d_year <- as.numeric(c(F, diff(year) < 0.5))
df[[i-1]] <- c(tmp[1,2], diff(tmp[,2]))*d_year + tmp[,2]*(1-d_year)}
}else{
for(i in 2: ncol(dat)){
df[[i-1]] <- aggregate(dat[,i],by=list(time),sum, na.rm = T)[,2] /
aggregate(dat[,i], by=list(time),
FUN = function(x) max(c(1,sum(abs(x) > 0.1, na.rm = T))))[,2]}
}
df <- as.data.frame(matrix(unlist(df),nrow=length(df[[1]])))
df <- cbind(unique(time), df)
names(df) <- c('time',names(dat)[-1])
return(df)
}
chain_season <- Ave(chain[, -grep('累[积计]', names(chain))], ac=F)
tmp <- Ave(chain[, c(1,grep('累[积计]', names(chain)))], ac=T)
chain_season <- merge(chain_season, tmp, by='time')
#纯碱数据不全，另行补充
chain_season <- chain_season[ ,-grep('碱', names(chain_season))]
tmp <- read.csv('玻璃数据2-纯碱.csv')
names(tmp)[1] <- 'time'
tmp$time <- as.POSIXlt(tmp$time, format = '%Y-%m-%d')
tmp <- Ave(tmp)
#四地纯碱价格平均
tmp$纯碱市场价 <- rowMeans(tmp[,3:6])
tmp <- tmp[,-c(3:6)]
chain_season <- merge(chain_season, tmp, by='time')
#房屋销售需提前两季度，另行补充
chain_season <- chain_season[ ,-grep('商品房销售', names(chain_season))]
tmp <- read.csv('房地产开发销售(月).csv')
names(tmp)[1] <- 'time'
tmp$time <- as.POSIXlt(tmp$time, format = '%Y-%m-%d')
#提前两个季度,并防止出现2月30
tmp$time <- tmp$time -days(3) + months(6)
tmp <- Ave(tmp)
chain_season <- merge(chain_season, tmp, by='time')
#白玉石指标无效，剔除
chain_season <- chain_season[,-grep('白云', names(chain_season))]
#丰田汽车数据2015 2016缺失，剔除
chain_season <- chain_season[,-grep('丰田', names(chain_season))]
#浮法玻璃平均价三地平均
index <- grep('现货平均价.平方米..浮法玻璃', names(chain_season))
chain_season$浮法玻璃平均价 <- rowMeans(chain_season[,index])
chain_season <- chain_season[,-index]
#company netin
index <- grep('[玻璃]', report$申万二级)
glass <- report[index,]
report_clean <- function(name, time, y){
library(lubridate) # date management
if(class(time)[1] != 'POSIXlt') return('Wrong: required POSIXlt for time')
day(time) <- 27
name <- as.factor(name)
#make diff################
diff_name <- c(F, abs(diff(as.numeric(name))) < 0.5)
year <- as.numeric(format(time, format='%Y'))
diff_year <- c(F, diff(year) < 0.5)
index <- as.numeric(diff_name & diff_year)
dy <- c(y[1], diff(y))
y <- dy*index + y*(1-index)
#seasonal average################
dmonth <- c(as.numeric(format(time, format='%Y%m')[1]),
diff(as.numeric(format(time, format='%Y%m'))))
month <- as.numeric(format(time,format='%m'))
dseason <- dmonth/3*index + month*(1-index)/3
y <- rep(y/dseason, dseason)
name <- rep(name, dseason)
time <- rep(time, dseason)
seasonal_index <- rep(dseason, dseason)
index4 <- which(seasonal_index == 4)
index3 <- which(seasonal_index == 3)
index2 <- which(seasonal_index == 2)
index_1 <- c(index2[c(1:length(index2))%%2 == 1],
index3[c(1:length(index3))%%3 == 2],
index4[c(1:length(index4))%%4 == 3])
index_2 <- c(index3[c(1:length(index3))%%3 == 1],
index4[c(1:length(index4))%%4 == 2])
index_3 <- c(index4[c(1:length(index4))%%4 == 1])
time[index_1] <- time[index_1] - months(3)
time[index_2] <- time[index_2] - months(6)
time[index_3] <- time[index_3] - months(9)
de_y <- data.frame(name, time, y)
return(de_y)
}
netin <- report_clean(glass$corp_name, glass$report_period, glass$净利润)
netin <- netin[order(netin$time),]
netin <- aggregate(netin$y, by=list(as.yearqtr(netin$time)), mean)
names(netin) <- c('time', 'netin')
netin
dat_glass <- merge(netin, chain_season, by='time')
dat_glass <- dat_glass[,-1]
#石英砂数据有缺失
dat_glass[dat_glass == 0] <- NA
na1 <- apply(dat_glass,1, function(x){sum(is.na(x))>0.5})
lm1 <- lm(netin~出厂价.含税..高纯石英砂.国内主流厂商平均, dat_glass)
summary(lm1)
X <- as.matrix(dat_glass[!na1,-1])
Y <- dat_glass[!na1,1]
# model <- cv.glmnet(X,Y,family="binomial",type.measure="deviance")
model <- cv.glmnet(X,Y)
# 绘制CV曲线图，选择最佳lambda值
plot(model)
model$lambda.1se
# 提取最终模型
model.final <- model$glmnet.fit
# 取得简洁模型的参数系数
model.coef <- coef(model$glmnet.fit, s = model$lambda.1se)
# 取得原始模型的参数系数
all.coef <- coef(model$glmnet.fit, s =  min(model.final$lambda))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[,index])
summary(lm1)
tmp <- dat_glass[!na1,]
colnames(tmp) <- ''
corr <- cor(tmp)
corrplot.mixed(corr, diag = 'n', tl.pos = 'lt')
lm0 <- lm(netin~1, data = dat_glass)
lm_a <-  step(lm0, direction = 'backward')
summary(lm_a)
lars1 <- lars(as.matrix(dat_glass[,-1]), dat_glass[,1], type = 'lasso')
tmp <- dat_glass[!na1,]
colnames(tmp) <- ''
corr <- cor(tmp)
corrplot.mixed(corr, diag = 'n', tl.pos = 'lt')
lm0 <- lm(netin~., data = dat_glass)
lm_a <-  step(lm0)
names(dat_glass)
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
dat_glass <- dat_glass[,-grep('石英砂', names(dat_glass))]
X <- as.matrix(dat_glass[,-1])
Y <- dat_glass[,1]
model <- cv.glmnet(X,Y)
plot(model)
model$lambda.1se
model.final <- model$glmnet.fit
model.coef <- coef(model$glmnet.fit, s = model$lambda.1se)
all.coef <- coef(model$glmnet.fit, s =  min(model.final$lambda))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
lm0 <- lm(netin~., data = dat_glass)
lm_a <-  step(lm0)
summary(lm_a)
coef <- as.matrix(all.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[,index])
summary(lm1)
rownames(coef)
coef
all.coef
model.coef
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[,index])
summary(lm1)
lm0 <- lm(netin~., data = dat_glass)
lm_a <-  step(lm0)
summary(lm_a)
summary(lm0)
lm_b <- step(lm0, scope = list(criterion = "BIC"))
summary(lm_b)
lars1 <- lars(X, Y, type = 'lasso')
summary(lars1)
lars1$Gram
X <- as.matrix(dat_glass[,-1])
Y <- dat_glass[,1]
P <- ncol(dat_glass)
A <- c()
contiune <- T
i <- 1
while(contiune & (i<150)){
AC <- setdiff(c(2:P),A)
AIC0 <- extractAIC(lm(Y~., data=mydat[,c(1,A)]))[2]
AIC <- c()
for(j in AC){
AIC <- c(AIC, extractAIC(lm(Y~., data=mydat[,c(1,A,j)]))[2])
}
minaic <- min(AIC)
J <- AC[which.min(AIC)]
if(minaic < AIC0){A <- c(A,J)
}else{continue <- F}
i <- i+1
}
mydat <- dat_glass
mydat <- dat_glass
y <- names(mydat)[1]
A <- c()
contiune <- T
i <- 1
while(contiune & (i<150)){
AC <- setdiff(c(2:P),A)
AIC0 <- extractAIC(lm(y~., data=mydat[,c(1,A)]))[2]
AIC <- c()
for(j in AC){
AIC <- c(AIC, extractAIC(lm(Y~., data=mydat[,c(1,A,j)]))[2])
}
minaic <- min(AIC)
J <- AC[which.min(AIC)]
if(minaic < AIC0){A <- c(A,J)
}else{continue <- F}
i <- i+1
}
while(contiune & (i<150)){
AC <- setdiff(c(2:P),A)
AIC0 <- extractAIC(lm(as,format(paste0(y,'~.')), data=mydat[,c(1,A)]))[2]
AIC <- c()
for(j in AC){
AIC <- c(AIC, extractAIC(lm(Y~., data=mydat[,c(1,A,j)]))[2])
}
minaic <- min(AIC)
J <- AC[which.min(AIC)]
if(minaic < AIC0){A <- c(A,J)
}else{continue <- F}
i <- i+1
}
lm(as,format(paste0(y,'~.')), data=mydat[,c(1,A)])
lm(as.format(paste0(y,'~.')), data=mydat[,c(1,A)])
lm(as.formula(paste0(y,'~.')), data=mydat[,c(1,A)])
length(A) < 1
while(contiune & (i<150)){
AC <- setdiff(c(2:P),A)
if(length(A) < 1){AIC0 <- Inf}
AIC0 <- extractAIC(lm(as.formula(paste0(y,'~.')), data=mydat[,c(1,A)]))[2]
AIC <- c()
for(j in AC){
AIC <- c(AIC, extractAIC(lm(Y~., data=mydat[,c(1,A,j)]))[2])
}
minaic <- min(AIC)
J <- AC[which.min(AIC)]
if(minaic < AIC0){A <- c(A,J)
}else{continue <- F}
i <- i+1
}
while(contiune & (i<150)){
AC <- setdiff(c(2:P),A)
if(length(A) < 1){AIC0 <- Inf
}else{AIC0 <- extractAIC(lm(as.formula(paste0(y,'~.')), data=mydat[,c(1,A)]))[2]}
AIC <- c()
for(j in AC){
AIC <- c(AIC, extractAIC(lm(Y~., data=mydat[,c(1,A,j)]))[2])
}
minaic <- min(AIC)
J <- AC[which.min(AIC)]
if(minaic < AIC0){A <- c(A,J)
}else{continue <- F}
i <- i+1
}
for(j in AC){
print(j)
AIC <- c(AIC, extractAIC(lm(Y~., data=mydat[,c(1,A,j)]))[2])
}
lm0 <- lm(netin~., data = dat_glass)
lm0
summary(lm0)
library(car)
vif(lm0)
plot(lm0)
dat_glass <- merge(netin, chain_season, by='time')
dat_glass <- dat_glass[,-1]
#石英砂数据有缺失
dat_glass[dat_glass == 0] <- NA
na1 <- apply(dat_glass,1, function(x){sum(is.na(x))>0.5})
##剔除石英砂尝试
#dat_glass <- dat_glass[,-grep('石英砂', names(dat_glass))]
mydat <- dat_glass
y <- names(mydat)[1]
A <- c()
contiune <- T
i <- 1
while(contiune & (i<150)){
AC <- setdiff(c(2:P),A)
if(length(A) < 1){AIC0 <- Inf
}else{AIC0 <- extractAIC(lm(as.formula(paste0(y,'~.')), data=mydat[,c(1,A)]))[2]}
AIC <- c()
for(j in AC){
AIC <- c(AIC, extractAIC(lm(Y~., data=mydat[,c(1,A,j)]))[2])
}
minaic <- min(AIC)
J <- AC[which.min(AIC)]
if(minaic < AIC0){A <- c(A,J)
}else{continue <- F}
i <- i+1
}
continue
continue & i<200
names(dat_glass)[A]
dat_glass[dat_glass == 0] <- NA
na1 <- apply(dat_glass,1, function(x){sum(is.na(x))>0.5})
X <- as.matrix(dat_glass[!na1,-1])
Y <- dat_glass[!na1,1]
model <- cv.glmnet(X,Y)
model$glmnet.fit
plot(model)
model$lambda
model$cvm
model$name
model$lambda.min
log(model$lambda.min)
log(model$lambda.1se)
model$nzero
model$cvlo
model$glmnet.fit
model <- glmnet(X,Y)
model$lambda.1se
load("C:/Users/dell/Desktop/暖流/report.rda")
unique(report$申万一级)
model <- cv.glmnet(X,Y)
model$lambda.1se
model$lambda.1se
model$nzero
model$lambda[23]
model.coef <- coef(model$glmnet.fit, s = model$lambda[23])
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[,index])
summary(lm1)
lm_a <- step(lm1)
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
summary(lm1)
log(100)
model.coef <- coef(model$glmnet.fit, s = e^13)
e^13
e
e
E
exp(13)
model.coef <- coef(model$glmnet.fit, s = exp(13))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
summary(lm1)
dat_glass <- merge(netin, chain_season, by='time')
dat_glass <- dat_glass[,-1]
##剔除石英砂尝试
#dat_glass <- dat_glass[,-grep('石英砂', names(dat_glass))]
#石英砂数据有缺失
dat_glass[dat_glass == 0] <- NA
na1 <- apply(dat_glass,1, function(x){sum(is.na(x))>0.5})
dat_glass <- merge(netin, chain_season, by='time')
dat_glass <- dat_glass[,-1]
##剔除石英砂尝试
#dat_glass <- dat_glass[,-grep('石英砂', names(dat_glass))]
#石英砂数据有缺失
dat_glass[dat_glass == 0] <- NA
na1 <- apply(dat_glass,1, function(x){sum(is.na(x))>0.5})
X <- as.matrix(dat_glass[!na1,-1])
Y <- dat_glass[!na1,1]
model <- cv.glmnet(X,Y)
plot(model)
model$lambda.1se
model.final <- model$glmnet.fit
model.coef <- coef(model$glmnet.fit, s = model$lambda.1se)
all.coef <- coef(model$glmnet.fit, s =  min(model.final$lambda))
model.coef <- coef(model$glmnet.fit, s = exp(13))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
model.coef <- coef(model$glmnet.fit, s = exp(15))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
model.coef <- coef(model$glmnet.fit, s = exp(14))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
model.coef <- coef(model$glmnet.fit, s = exp(15))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
model.coef <- coef(model$glmnet.fit, s = exp(13))
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
model$cvm
model$lambda
model$nzero
model.coef <- coef(model$glmnet.fit, s = model$lambda[60])
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
model.coef <- coef(model$glmnet.fit, s = model$lambda[85])
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
grep('石英砂', names(dat_glass)
)
names(dat_glass)
vif
vif(lm_a)
summary(lm1)
summary(lm_a)
index <- index[-c(4,5,11,12)]
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
index <- index[-c(4,11,12)]
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
index <- index[-c(5,11,12)]
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
index <- index[-c(5,11,12)]
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
vif(lm_a)
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
vif(lm_a)
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
#hard inout
index <- index[-c(4,11,12)]
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
vif(lm_a)
coef <- as.matrix(model.coef)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
#hard inout
index <- index[-c(11,12)]
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
lm_a <- step(lm1)
summary(lm_a)
vif(lm_a)
index <- c(1, which(names(dat_glass) %in% rownames(coef)[abs(coef) > 0.01]))
lm1 <- lm(netin~., data = dat_glass[!na1,index])
summary(lm1)
summary(lm_a)
model$nzero
summary(lm_a)
vif(lm_a)
setwd("C:/Users/dell/Desktop/暖流/玻璃")
sink('玻璃行业利润模型.txt')
summary(lm_a)
print(lm_a$coefficients)
sink()
